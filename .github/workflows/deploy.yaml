name: Deploy Backend to AWS

on:
  push:
    branches:
      - main
    paths:
      - "Backend/**" # Only trigger on changes to Backend directory
      - ".github/workflows/deploy.yml" # Or changes to this workflow
  workflow_dispatch: # Allow manual trigger regardless of changed files

env:
  AWS_REGION: eu-west-1 # Updated to match your region
  EB_APP_NAME: ${{ vars.EB_APP_NAME }}
  EB_ENV_NAME: ${{ vars.EB_ENV_NAME }}
  DEPLOY_PACKAGE_NAME: "classifier-api-${{ github.sha }}.zip"

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          cd Backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create Elastic Beanstalk deployment package
        run: |
          # Navigate to Backend directory
          cd Backend

          # Create necessary directories
          mkdir -p .ebextensions
          mkdir -p .platform/nginx/conf.d

          # Create environment configuration
          echo '
          option_settings:
            aws:elasticbeanstalk:application:environment:
              FLASK_APP: "wsgi.py"
              PYTHONPATH: "/var/app/current"
          ' > .ebextensions/00_environment_config.config

          # Environment settings
          echo '
          option_settings:
            aws:elasticbeanstalk:container:python:
              WSGIPath: wsgi:app
            aws:elasticbeanstalk:application:environment:
              FLASK_ENV: ${{ vars.FLASK_ENV || 'production' }}
          ' > .ebextensions/01_environment.config

          # Database migration configuration with improved steps
          echo '
          container_commands:
            01_install_requirements:
              command: "source /var/app/venv/*/bin/activate && pip install -r requirements.txt"
              leader_only: true
            
            02_create_migrations_dir:
              command: "mkdir -p migrations/versions"
              ignoreErrors: true
              leader_only: true
            
            03_init_migrations:
              command: "source /var/app/venv/*/bin/activate && python -m flask db init || echo 'Migrations already initialized'"
              ignoreErrors: true
              leader_only: true
            
            04_create_initial_migration:
              command: "source /var/app/venv/*/bin/activate && python -m flask db migrate -m 'Initial migration' || echo 'Migration creation skipped'"
              ignoreErrors: true
              leader_only: true
            
            05_upgrade_database:
              command: "source /var/app/venv/*/bin/activate && python -m flask db upgrade"
              leader_only: true
            
            06_log_database_status:
              command: "source /var/app/venv/*/bin/activate && python -c \\"from app import create_app, db; app = create_app(); app.app_context().push(); print('Available tables: ' + str(db.engine.table_names()))\\" > /var/log/db_tables.log"
              leader_only: true
          ' > .ebextensions/02_migrate.config

          # Create Nginx configuration for large file uploads (using official AWS approach)
          echo 'client_max_body_size 50M;' > .platform/nginx/conf.d/client_max_body_size.conf

          # Create deployment package from Backend directory
          zip -r ../${{ env.DEPLOY_PACKAGE_NAME }} . -x "*.git*" "terraform/*" ".github/*" "tests/*" "*.pyc" "instance/*" "*.csv" "*.ipynb"

          # Move back to root
          cd ..

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APP_NAME }}
          environment_name: ${{ env.EB_ENV_NAME }}
          version_label: "v-${{ github.sha }}"
          region: ${{ env.AWS_REGION }}
          deployment_package: ${{ env.DEPLOY_PACKAGE_NAME }}
          wait_for_environment_recovery: 300

      - name: Upload deployment package artifact
        uses: actions/upload-artifact@v4
        with:
          name: eb-deploy-package
          path: ${{ env.DEPLOY_PACKAGE_NAME }}
